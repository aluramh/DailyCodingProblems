from typing import List


class Solution:
    # O(n^3)
    def threeSumCubic(self, nums: List[int]) -> List[List[int]]:
        nums = sorted(nums)
        sols = []

        i = 0
        while i < len(nums) - 2:
            j = i + 1
            while j < len(nums) - 1:
                k = j + 1
                while k < len(nums):
                    are_different_indexes = i != j and j != k and i != k

                    summed_val = (nums[i] + nums[j] + nums[k])
                    if are_different_indexes and summed_val == 0:
                        possible = [nums[i], nums[j], nums[k]]

                        if self.isOriginal(sols, possible):
                            sols.append(possible)
                    # Stop looking for more k's because the values will just keep going up
                    # since it's sorted
                    elif summed_val > 0:
                        break

                    k += 1
                j += 1
            i += 1

        return sols

    def threeSum(self, nums: List[int]) -> List[List[int]]:
        # Sort!
        nums = sorted(nums)

        threes = []
        i = 0

        while i + 1 < len(nums) - 1:  # because it's in threes
            low = i + 1
            high = len(nums) - 1

            # 2Sum problem
            while low < high:
                three_sum = nums[i] + nums[low] + nums[high]

                if three_sum == 0:
                    sol = [nums[low], nums[i], nums[high]]
                    if sol not in threes:
                        threes.append(sol)
                    low += 1

                elif three_sum < 0:
                    low += 1

                elif three_sum > 0:
                    high -= 1

            # Close off the set from the left side
            i += 1

        # We have already gone through all the array, so just exit the
        return threes

    def isOriginal(self, sols, incoming):
        for sol in sols:
            if sorted(sol) == sorted(incoming):
                return False
        return True


# ANCHOR: - Utilities


def isOriginal(sols, incoming):
    for sol in sols:
        if sorted(sol) == sorted(incoming):
            return False
    return True


def areEqual(sols: List[List[int]], given: List[List[int]]):
    if len(sols) != len(given):
        return False

    i = 0
    while i < len(given):
        if sorted(sols[i]) != sorted(given[i]):
            return False
        i += 1

    return True


tests = [
    ([0, 0, 0], [[0, 0, 0]]),
    ([-1, 0, 1, 2, -1, -4], [[-1, -1, 2], [-1, 0, 1]]),
    ([1, 2, -2, -1], []),
    ([-2, 0, 1, 1, 2], [[-2, 0, 2], [-2, 1, 1]]),
    # (
    #     [
    #         34, 55, 79, 28, 46, 33, 2, 48, 31, -3, 84, 71, 52, -3, 93, 15, 21,
    #         -43, 57, -6, 86, 56, 94, 74, 83, -14, 28, -66, 46, -49, 62, -11,
    #         43, 65, 77, 12, 47, 61, 26, 1, 13, 29, 55, -82, 76, 26, 15, -29,
    #         36, -29, 10, -70, 69, 17, 49
    #     ],
    #     [],
    # ),
    (
        [
            14, 4, 6, -1, 10, 9, -8, 7, -13, 14, -13, -11, -8, -9, 11, 14, -8,
            -14, -13, 7, -10, -15, -13, -11, -11, 11, 14, 13, 2, -14, 1, -7,
            -2, 14, -1, -15, 9, 7, -1, 3, 6, 1, 7, 5, -1, -5, 4, -2, -4, -1,
            -9, -7, -1, -7, -11, 3, 12, 10, -7, -1, 12, 1, 8, -13, 1, 14, 9,
            -13, 6, -7, -3, -11, 2, -11, 10, -14, -1, -9, 0, 2, 5, 6, 3, -11,
            6, 7, 0, 3, 3, 0, -12, -8, -13, 3, -14, -5, 2, 10, -11, -14, -12,
            1, -10, 5, 5, 7, -1, 11, 14, 6, -10, -4, -3, 8, -7, 10, 1, 8, -1,
            -11, -15, -6, -12, -13, 12, -11
        ],
        [[-15, 1, 14], [-15, 2, 13], [-15, 3, 12], [-15, 4, 11], [-15, 5, 10],
         [-15, 6, 9], [-15, 7, 8], [-14, 0, 14], [-14, 1, 13], [-14, 2, 12],
         [-14, 3, 11], [-14, 4, 10], [-14, 5, 9], [-14, 6, 8], [-14, 7, 7],
         [-13, -1, 14], [-13, 0, 13], [-13, 1, 12], [-13, 2, 11], [-13, 3, 10],
         [-13, 4, 9], [-13, 5, 8], [-13, 6, 7], [-12, -2, 14], [-12, -1, 13],
         [-12, 0, 12], [-12, 1, 11], [-12, 2, 10], [-12, 3, 9], [-12, 4, 8],
         [-12, 5, 7], [-12, 6, 6], [-11, -3, 14], [-11, -2, 13], [-11, -1, 12],
         [-11, 0, 11], [-11, 1, 10], [-11, 2, 9], [-11, 3, 8], [-11, 4, 7],
         [-11, 5, 6], [-10, -4, 14], [-10, -3, 13], [-10, -2, 12],
         [-10, -1, 11], [-10, 0, 10], [-10, 1, 9], [-10, 2, 8], [-10, 3, 7],
         [-10, 4, 6], [-10, 5, 5], [-9, -5, 14], [-9, -4, 13], [-9, -3, 12],
         [-9, -2, 11], [-9, -1, 10], [-9, 0, 9], [-9, 1, 8], [-9, 2, 7],
         [-9, 3, 6], [-9, 4, 5], [-8, -6, 14], [-8, -5, 13], [-8, -4, 12],
         [-8, -3, 11], [-8, -2, 10], [-8, -1, 9], [-8, 0, 8], [-8, 1, 7],
         [-8, 2, 6], [-8, 3, 5], [-8, 4, 4], [-7, -7, 14], [-7, -6, 13],
         [-7, -5, 12], [-7, -4, 11], [-7, -3, 10], [-7, -2, 9], [-7, -1, 8],
         [-7, 0, 7], [-7, 1, 6], [-7, 2, 5], [-7, 3, 4], [-6, -5, 11],
         [-6, -4, 10], [-6, -3, 9], [-6, -2, 8], [-6, -1, 7], [-6, 0, 6],
         [-6, 1, 5], [-6, 2, 4], [-6, 3, 3], [-5, -5, 10], [-5, -4, 9],
         [-5, -3, 8], [-5, -2, 7], [-5, -1, 6], [-5, 0, 5], [-5, 1, 4],
         [-5, 2, 3], [-4, -4, 8], [-4, -3, 7], [-4, -2, 6], [-4, -1, 5],
         [-4, 0, 4], [-4, 1, 3], [-4, 2, 2], [-3, -3, 6], [-3, -2, 5],
         [-3, -1, 4], [-3, 0, 3], [-3, 1, 2], [-2, -2, 4], [-2, -1, 3],
         [-2, 0, 2], [-2, 1, 1], [-1, -1, 2], [-1, 0, 1], [0, 0, 0]],
    ),
    (
        [
            13, 9, 1, 12, -7, -12, 7, 3, 9, 6, -7, 4, 9, 5, 5, -7, 4, 11, 1,
            -2, 12, 3, -12, -15, 0, -12, -6, -1, 7, -5, -4, -3, 12, 4, -14,
            -10, -1, 8, 1, -6, -1, 9, 13, -14, -1, -5, -6, -12, -8, 2, 2, 11,
            13, -3, 11, -2, 1, -10, 4, -15, -8, 7, -11, 11, -4, -10, -13, 3, 5,
            3, 12, 11, -11, 2, 12, 3, 13, 13, -2, 12, -7, -15, 8, -9, -10, -4,
            -4, 6, 1, -15, -2, 0, -1, 2, -3, 10, -1, -9, -10, -11, 1, -13, -15,
            5, -3, 5, -7, -5, -5, 6, 14, 3, -1, 7, 1, -4, -12, 12, -13, -4, 4,
            0, 3, -12, 9, -15, 6
        ],
        [[-15, 1, 14], [-15, 2, 13], [-15, 3, 12], [-15, 4, 11], [-15, 5, 10],
         [-15, 6, 9], [-15, 7, 8], [-14, 0, 14], [-14, 1, 13], [-14, 2, 12],
         [-14, 3, 11], [-14, 4, 10], [-14, 5, 9], [-14, 6, 8], [-14, 7, 7],
         [-13, -1, 14], [-13, 0, 13], [-13, 1, 12], [-13, 2, 11], [-13, 3, 10],
         [-13, 4, 9], [-13, 5, 8], [-13, 6, 7], [-12, -2, 14], [-12, -1, 13],
         [-12, 0, 12], [-12, 1, 11], [-12, 2, 10], [-12, 3, 9], [-12, 4, 8],
         [-12, 5, 7], [-12, 6, 6], [-11, -3, 14], [-11, -2, 13], [-11, -1, 12],
         [-11, 0, 11], [-11, 1, 10], [-11, 2, 9], [-11, 3, 8], [-11, 4, 7],
         [-11, 5, 6], [-10, -4, 14], [-10, -3, 13], [-10, -2,
                                                     12], [-10, -1, 11],
         [-10, 0, 10], [-10, 1, 9], [-10, 2, 8], [-10, 3, 7], [-10, 4, 6],
         [-10, 5, 5], [-9, -5, 14], [-9, -4, 13], [-9, -3, 12], [-9, -2, 11],
         [-9, -1, 10], [-9, 0, 9], [-9, 1, 8], [-9, 2, 7], [-9, 3, 6],
         [-9, 4, 5], [-8, -6, 14], [-8, -5, 13], [-8, -4, 12], [-8, -3, 11],
         [-8, -2, 10], [-8, -1, 9], [-8, 0, 8], [-8, 1, 7], [-8, 2, 6],
         [-8, 3, 5], [-8, 4, 4], [-7, -7, 14], [-7, -6, 13], [-7, -5, 12],
         [-7, -4, 11], [-7, -3, 10], [-7, -2, 9], [-7, -1, 8], [-7, 0, 7],
         [-7, 1, 6], [-7, 2, 5], [-7, 3, 4], [-6, -6, 12], [-6, -5, 11],
         [-6, -4, 10], [-6, -3, 9], [-6, -2, 8], [-6, -1, 7], [-6, 0, 6],
         [-6, 1, 5], [-6, 2, 4], [-6, 3, 3], [-5, -5, 10], [-5, -4, 9],
         [-5, -3, 8], [-5, -2, 7], [-5, -1, 6], [-5, 0, 5], [-5, 1, 4],
         [-5, 2, 3], [-4, -4, 8], [-4, -3, 7], [-4, -2, 6], [-4, -1, 5],
         [-4, 0, 4], [-4, 1, 3], [-4, 2, 2], [-3, -3, 6], [-3, -2, 5],
         [-3, -1, 4], [-3, 0, 3], [-3, 1, 2], [-2, -2, 4], [-2, -1, 3],
         [-2, 0, 2], [-2, 1, 1], [-1, -1, 2], [-1, 0, 1], [0, 0, 0]],
    ),
]

try:
    for test, expected in tests:
        r = Solution().threeSum(test)

        assert (areEqual(expected, r))

    print("Success!")
except AssertionError:
    print("Wrong answer")
